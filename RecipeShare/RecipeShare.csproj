<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <InvariantGlobalization>false</InvariantGlobalization>
    <PublishSingleFile>false</PublishSingleFile>
    <PublishReadyToRun>true</PublishReadyToRun>
    <RuntimeIdentifier>win-x64</RuntimeIdentifier>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <DebugType>pdbonly</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="Entities\**" />
    <Content Remove="Entities\**" />
    <EmbeddedResource Remove="Entities\**" />
    <None Remove="Entities\**" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="EasyCaching.Core" Version="1.9.2" />
    <PackageReference Include="EasyCaching.InMemory" Version="1.9.2" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="8.0.10" />
    <PackageReference Include="Microsoft.Data.SqlClient" Version="6.0.1" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.5" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.5">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.5" />
    <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore" Version="8.0.10" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.8.1" />
    <PackageReference Include="Swashbuckle.AspNetCore.Annotations" Version="6.8.1" />
  </ItemGroup>

  <!-- Development/Testing packages -->
  <ItemGroup Condition="'$(Configuration)'=='Debug'">
    <PackageReference Include="BenchmarkDotNet" Version="0.14.0" />
    <PackageReference Include="Microsoft.Diagnostics.Tracing.TraceEvent" Version="3.1.8" />
  </ItemGroup>

  <!-- SPA Configuration -->
  <PropertyGroup>
    <SpaRoot>../RecipeShareAngularApp/</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules/**</DefaultItemExcludes>
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
  </PropertyGroup>

  <!-- Ensure Node.js dependencies are restored in development -->
  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition="'$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules')">
    <Message Importance="high" Text="Restoring Node.js dependencies from $(SpaRoot)" />

    <!-- Check if Node.js is available -->
    <Exec Command="node --version" ContinueOnError="true" EchoOff="true">
      <Output TaskParameter="ExitCode" PropertyName="NodeExitCode" />
    </Exec>

    <Error Condition="'$(NodeExitCode)' != '0'" Text="Node.js is not installed or not available in PATH. Please install Node.js to build the Angular application." />

    <!-- Install npm dependencies -->
    <Exec Command="npm install" WorkingDirectory="$(SpaRoot)" ContinueOnError="false" />
  </Target>

  <!-- Enhanced Angular build for production -->
  <!-- Temporarily removed PublishRunAngular target to avoid XML comment errors and manual Angular build is being used -->

  <!-- Clean Angular build output -->
  <Target Name="CleanSpaOutput" BeforeTargets="Clean">
    <Message Importance="high" Text="Cleaning Angular build output..." />
    <RemoveDir Directories="$(SpaRoot)dist;wwwroot" ContinueOnError="true" />
  </Target>

  <!-- Development file watching (optional) -->
  <ItemGroup Condition="'$(Configuration)' == 'Debug'">
    <Watch Include="$(SpaRoot)src/**/*.ts" />
    <Watch Include="$(SpaRoot)src/**/*.html" />
    <Watch Include="$(SpaRoot)src/**/*.scss" />
    <Watch Include="$(SpaRoot)src/**/*.css" />
  </ItemGroup>

</Project>
